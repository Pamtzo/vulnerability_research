import { expect } from 'chai';
import { ethers } from 'hardhat';
import { Contract } from 'ethers';
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';

describe('PonziContract', function () {
  let ponziContract: Contract;
  let ponziOwner: SignerWithAddress;

  let attacker: SignerWithAddress;
  let accounts: SignerWithAddress[];

  before(async function () {
    [ponziOwner, attacker, ...accounts] = await ethers.getSigners();

    const PonziContract = await ethers.getContractFactory('PonziContract');
    ponziContract = await PonziContract.connect(ponziOwner).deploy();
    await ponziContract.deployed();

    const newDeadline = Math.floor(Date.now() / 1000) + 3600; // Set the deadline 1 hour from now
    await ponziContract.connect(ponziOwner).setDeadline(newDeadline);
    await ponziContract.connect(ponziOwner).addNewAffilliate(ponziOwner.address);
    await ponziOwner.sendTransaction({
      to: ponziContract.address,
      value: ethers.utils.parseEther('100'),
    });
  });

  it('should not block in case of affiliate', async () => {
    const BlockerContract = await ethers.getContractFactory('BlockerContract');
    const blockerContract = await BlockerContract.connect(attacker).deploy();
    await blockerContract.deployed();

    const [account1, account2] = accounts;

    const account1InitialBalance = await ethers.provider.getBalance(account1.address);
    const ponziOwnerInitialBalance = await ethers.provider.getBalance(ponziOwner.address);

    // Set up owner - blocker - random affiliate
    await ponziContract.connect(ponziOwner).addNewAffilliate(blockerContract.address);
    await ponziContract.connect(ponziOwner).addNewAffilliate(account1.address);

    await ponziContract.connect(account2).joinPonzi([ponziOwner.address, blockerContract.address, account1.address], {
      value: ethers.utils.parseEther('3'),
    });

    const account1CurrentBalance = await ethers.provider.getBalance(account1.address);
    console.log('Account1 InitialBalance initial balance: ' + account1InitialBalance);
    console.log('Account1 CurrentBalance initial balance: ' + account1CurrentBalance);

    const ponziOwnerCurrentBalance = await ethers.provider.getBalance(ponziOwner.address);
    console.log('Account1 InitialBalance initial balance: ' + ponziOwnerInitialBalance);
    console.log('Account1 CurrentBalance initial balance: ' + ponziOwnerCurrentBalance);
  });

  it('should avoid reentrancy attack in ownerWithdraw', async function () {
    const ReentrancyAttack = await ethers.getContractFactory('ReentrancyAttack');
    const reentrancyAttack = await ReentrancyAttack.connect(attacker).deploy(ponziContract.address);
    await reentrancyAttack.deployed();

    const attackerInitialBalance = await ethers.provider.getBalance(reentrancyAttack.address);
    console.log('Attacker initial balance: ' + attackerInitialBalance);

    await reentrancyAttack.connect(attacker).startAttack({ value: ethers.utils.parseEther('15') });

    const attackerCurrentBalance = await ethers.provider.getBalance(reentrancyAttack.address);
    console.log('Attacker current balance: ' + attackerCurrentBalance);

    // Calculate the difference in ETH
    const differenceInEth = ethers.utils.formatEther(attackerCurrentBalance.sub(attackerInitialBalance));

    // Compare the difference to the expected value (19.0 ETH)
    // 0 + 15 funded by attacker
    // 15 - 1 - 10 affiliating and buying ownership
    // 4 + 15 withdraw funds once
    expect(differenceInEth).to.equal('19.0');
  });
});
