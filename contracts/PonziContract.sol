// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
// Hi dear candidate!
// Please review the following contract to find the 2 vulnerbilities that results in loss of funds.(High/Critical Severity)
// Please write a short description for each vulnerbillity you found alongside with a PoC in hardhat/foundry.
// Your PoC submission should be ready to be run without any modification
// Feel free to add additional notes regarding informational/low severity findings

// Added comment: Importing necessary contracts from OpenZeppelin
import 'openzeppelin-contracts/contracts/access/Ownable.sol';
import 'openzeppelin-contracts/contracts/security/ReentrancyGuard.sol';

contract PonziContract is ReentrancyGuard, Ownable {
    // Added comment: Event to track the setting of the registration deadline
    event RegistrationDeadline(uint256 registrationDeadline);

    // Added comment: Event to track withdrawal of funds
    event Withdraw(uint256 amount);

    // Added comment: Private variable to store the registration deadline
    uint256 private registrationDeadline;

    // Added comment: Array to store addresses of affiliates
    address[] public affiliates_;

    // Added comment: Mapping to track whether an address is an affiliate
    mapping(address => bool) public affiliates;

    // Added comment: Counter to keep track of the number of affiliates
    uint256 public affiliatesCount;

    // Added comment: Modifier to restrict certain functions to affiliates only
    modifier onlyAfilliates() {
        bool affiliate;

        // Added comment: Loop through affiliates to check if the sender is an affiliate
        for (uint256 i = 0; i < affiliatesCount; i++) {
            if (affiliates_[i] == msg.sender) {
                affiliate = true;
            }
        }
        require(affiliate == true, 'Not an Affiliate!');
        _;
    }

    // Added comment: Function to set the registration deadline, accessible only by the owner
    function setDeadline(uint256 _regDeadline) external onlyOwner {
        registrationDeadline = _regDeadline;
        emit RegistrationDeadline(registrationDeadline);
    }

    // Added comment: Function for users to join the Ponzi scheme, with a list of affiliates
    // Added comment: non reentrancy used
    function joinPonzi(
        address[] calldata _afilliates
    ) external payable nonReentrant {
        require(
            block.timestamp < registrationDeadline,
            'Registration not Active!'
        );
        require(_afilliates.length == affiliatesCount, 'Invalid length');
        require(msg.value == affiliatesCount * 1 ether, 'Insufficient Ether');

        // Added comment: Transfer Ether to affiliates
        for (uint256 i = 0; i < _afilliates.length; i++) {
            _afilliates[i].call{value: 1 ether}('');
        }

        // Added comment: Update affiliates' count and mappings
        affiliatesCount += 1;
        affiliates[msg.sender] = true;
        affiliates_.push(msg.sender);
    }

    // Added comment: Function for affiliates to buy the owner role
    function buyOwnerRole(address newAdmin) external payable onlyAfilliates {
        require(msg.value == 10 ether, 'Invalid Ether amount');

        // Added comment: Transfer ownership
        _transferOwnership(newAdmin);
    }

    // Added comment: Function for the owner to withdraw funds
    function ownerWithdraw(address to, uint256 amount) external onlyOwner {
        payable(to).call{value: amount}('');
        emit Withdraw(amount);
    }

    // Added comment: Function for the owner to add a new affiliate
    function addNewAffilliate(address newAfilliate) external onlyOwner {
        affiliatesCount += 1;
        affiliates[newAfilliate] = true;
        affiliates_.push(newAfilliate);
    }

    // Added comment: Fallback function to accept Ether
    receive() external payable {}
}
